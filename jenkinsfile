// Create build parameters. Used to set the name of the artifact to be downloaded.
// "parameters" defined in "properties" work only when defined outside of the node block.
// These "parameters" update the parameter configuration using the configure form.
// Parameters already defined in "configure form" will be removed.
properties([
    parameters([
        string(name: 'SERVER_ID', defaultValue: 'ART', description: 'configured artifactory server ID used to refer to the artifactory in the Jenkinsfile'),
        string(name: 'readmeFile', defaultValue: 'generic-local/readme1.txt', description: 'path to readme file'),
        string(name: 'notesFile', defaultValue: 'generic-local/sources/note1.txt', description: 'path to notes file')
    ])
])

def server = null
def buildInfo = null
def buildInfo_onlyUpload = null

node {
    stage('clean workspace'){
        sh 'rm -rf *'
        sh 'ls'
    }
    
    stage('check build conditions'){
        if (params.SERVER_ID == null) {
            currentBuild.result = 'ABORTED'
            error('Aborting early... parameter SERVER_ID is not set!!!')
        }
        
        echo "readme: ${params.readmefile}" //didn't work
        echo "readme: ${params.readmeFile}"
        echo "notes: ${params.notesfile}" //didn't work
        echo "notes: ${params.notesFile}"
        echo "readme: ${readmefile}"
        echo "readme: ${readmeFile}"
        echo params.readmefile //didn't work
        echo params.readmeFile
    }

    stage('checkout') {
        git url: 'https://github.com/mygitws/art_up_and_download.git'
        
        //just to test using multiple git repositories
        dir('repo_art'){
            git url: 'https://github.com/mygitws/art_up_and_download.git'
        }
        dir('repo_greeting'){
            git url: 'https://github.com/mygitws/testproj.git'
        }
        //use repo_art
        sh 'cat repo_art/sources/readme1.txt'
        //use repo_greeting
        sh 'chmod +x repo_greeting/sayHello'
        sh './repo_greeting/sayHello "Git"'
    }

    stage('create artifactory instance') {
        // Get Artifactory server instance, defined in the Artifactory Plugin administration page.
        server = Artifactory.server SERVER_ID

        buildInfo = Artifactory.newBuildInfo()
        buildInfo_onlyUpload = Artifactory.newBuildInfo()
        
        // Set custom build name and number.
        //buildInfo.setName 'myFrogBuild'
        //buildInfo.setNumber '42'
    }

    stage('upload/deploy') {
        // Read the upload spec which was downloaded from github.
        def uploadSpec = readFile 'uploadspec.json'
        // Upload to Artifactory.
        server.upload spec: uploadSpec, buildInfo: buildInfo_onlyUpload
    }

    stage('download using pattern') {
        // The download file contains pattern for downloading artifacts to the root directory by setting recursive=false
        def downloadSpec = readFile 'downloadspec.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    stage('download using AQL') {
        // Download using AQL (Artifactory Query Language)
        def downloadSpec = readFile 'downloadspec_aql.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    stage('download using AQL -simplified-') {
        // Download using AQL (Artifactory Query Language)
        def downloadSpec = readFile 'downloadspec_aql_2.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    stage('download using parameters in download spec defined in Jenkinsfile') {       
        def downloadSpec = """{
            "files": [
                {
                    "pattern": "${params.readmeFile}",
                    "target": "downloaded_using_params/"
                },
                {
                    "pattern": "${params.notesFile}",
                    "target": "downloaded_using_params/"
                }
            ]
        }"""
 
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    //Using parameters in Json download spec file:
    //  works: "pattern": "${notesFile}"
    //  doesn't work: "pattern": "${params.notesFile}"
    stage('download using parameters in download spec json file') {
        def downloadSpec = readFile 'downloadspec_withParams.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }

    stage('publish build info') {
        // Publish build info.
        server.publishBuildInfo buildInfo_onlyUpload
    }
}
