// Create build parameters. Used to set the name of the artifact to be downloaded.
// "parameters" defined in "properties" work only when defined outside of the node block.
// These "parameters" update the parameter configuration using the configure form.
// Parameters already defined in "configure form" will be removed.
properties([
    parameters([
        string(name: 'version', defaultValue: '1', description: 'version of uploaded file'),
        string(name: 'SERVER_ID', defaultValue: 'ART', description: 'configured artifactory server ID used to refer to the artifactory in the Jenkinsfile'),
        string(name: 'readmeFile', defaultValue: 'generic-local/readme1.txt', description: 'path to readme file'),
        string(name: 'notesFile', defaultValue: 'generic-local/sources/note1.txt', description: 'path to notes file'),
        string(name: 'compA', defaultValue: 'generic-local/me.org/update_compA/update_compA-0.0.1+alpha-mybranch.7.zip', description: 'path to compA')
    ])
])


def server = null
def buildInfo = null
//def buildInfo_onlyUpload = null
def buildNumberTest = 60

node {
  try {
    stage('clean workspace'){
        sh 'mkdir -p a/b/c'
        sh 'touch a/b/c/file'
        sh 'pwd && tree'
        sh 'rm -rf *'
        sh 'pwd && tree'
        
        // deleteDir() do the same as rm -rf *
        sh 'mkdir -p a/b/c'
        sh 'touch a/b/c/file'
        sh 'pwd && tree'
        deleteDir()
        sh 'pwd && tree'
    }
    
    stage('check build conditions'){
        if (params.SERVER_ID == null || !params.SERVER_ID.trim()) {
            // using error()
            //currentBuild.result = 'ABORTED'
            //error('Aborting early... parameter SERVER_ID is not set!!!')
            
            // using try catch
            throw new AbortException("Parameter SERVER_ID is not set!")
        }
        
        echo "readme: ${params.readmefile}" //didn't work
        echo "readme: ${params.readmeFile}"
        echo "notes: ${params.notesfile}" //didn't work
        echo "notes: ${params.notesFile}"
        echo "readme: ${readmefile}"
        echo "readme: ${readmeFile}"
        echo params.readmefile //didn't work
        echo params.readmeFile
    }

    stage('checkout') {
        git url: 'https://github.com/mygitws/art_up_and_download.git'
        
        //just to test using multiple git repositories
        dir('repo_art'){
            git url: 'https://github.com/mygitws/art_up_and_download.git'
        }
        dir('repo_greeting'){
            git url: 'https://github.com/mygitws/testproj.git'
        }
        //use repo_art
        sh 'cat repo_art/sources/readme1.txt'
        //use repo_greeting
        sh 'chmod +x repo_greeting/sayHello'
        sh './repo_greeting/sayHello "Git"'
    }

    stage('create artifactory instance') {
        // Get Artifactory server instance, defined in the Artifactory Plugin administration page.
        server = Artifactory.server SERVER_ID

        buildInfo = Artifactory.newBuildInfo()
        //buildInfo_onlyUpload = Artifactory.newBuildInfo()
        
        // Set custom build name and number.
        //buildInfo.setName 'myFrogBuild'
        //buildInfo.setNumber '42'
    }

    stage('upload/deploy') {
        // Read the upload spec which was downloaded from github.
        def uploadSpec = readFile 'uploadspec.json'
        // Upload to Artifactory.
        server.upload spec: uploadSpec, buildInfo: buildInfo
    }
    
    stage('upload versioned files') {
        // Read the upload spec which was downloaded from github.
        def uploadSpec = readFile 'uploadspecWithVersionPlaceholder.json'
        // Upload to Artifactory.
        server.upload spec: uploadSpec, buildInfo: buildInfo
    }
    
    stage('download latest') {
        def downloadSpec = readFile 'downloadspec_latestBuild.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }

    stage('download using pattern') {
        // The download file contains pattern for downloading artifacts to the root directory by setting recursive=false
        def downloadSpec = readFile 'downloadspec.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    stage('download using AQL') {
        // Download using AQL (Artifactory Query Language)
        def downloadSpec = readFile 'downloadspec_aql.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    stage('download using AQL -simplified-') {
        // Download using AQL (Artifactory Query Language)
        def downloadSpec = readFile 'downloadspec_aql_2.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    stage('download using parameters in download spec defined in Jenkinsfile') {       
        def downloadSpec = """{
            "files": [
                {
                    "pattern": "${params.readmeFile}",
                    "target": "downloaded_using_params/"
                },
                {
                    "pattern": "${params.notesFile}",
                    "target": "downloaded_using_params/"
                }
            ]
        }"""
 
        server.download spec: downloadSpec, buildInfo: buildInfo
    }
    
    //Using parameters in Json download spec file:
    //  works: "pattern": "${notesFile}"
    //  doesn't work: "pattern": "${params.notesFile}"
    stage('download using parameters in download spec json file') {
        def downloadSpec = readFile 'downloadspec_withParams.json'
        server.download spec: downloadSpec, buildInfo: buildInfo
        
        if (buildInfo.getDependencies().size() > 0) {
            def localPath = buildInfo.getDependencies()[0].getLocalPath()
            def remotePath = buildInfo.getDependencies()[0].getRemotePath()
            def md5 = buildInfo.getDependencies()[0].getMd5()
            def sha1 = buildInfo.getDependencies()[0].getSha1()
            //def sha256 = buildInfo.getDependencies()[0].getSha256() //does not work
            //def sha256 = buildInfo.getDependencies()[0].getChecksums().getSha256() //does not work
            //def id = buildInfo.getDependencies()[0].getId()
            
            echo "localPath: ${localPath}"
            echo "remotePath: ${remotePath}"
            echo "md5: ${md5}"
            echo "sha1: ${sha1}"
            //echo "sha256: ${sha256}"
        }
        
        sh '''
        mkdir toUpload
        cd toUpload
        cp ../downloaded_using_paramsInJsonSpecFile/me.org/update_compA/update_compA*.zip .
        tree
        mv update_compA*.zip compA.zip
        tree
        '''
    }

    stage('publish build info') {
        // Publish build info.
        server.publishBuildInfo buildInfo
    }
  } catch (err) {
    echo "Failed: ${err}"
    currentBuild.result = "FAILURE"
  }
}

